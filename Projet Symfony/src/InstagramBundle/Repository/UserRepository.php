<?php

namespace InstagramBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
		public function isAbonne($user_id, $suivi_id)
		{
				$qb = $this
						->createQueryBuilder('u1')
						->where("u1.id = :user_id")
						->setParameter("user_id", $user_id)
				;
			
				$qb
        		->innerJoin('u1.abonnements', 'u2')
           	->addSelect('u2')
 						->andWhere($qb->expr()->in('u2', $suivi_id))
				;

				return ($qb->getQuery()->getOneOrNullResult() != null);
		}
	
		public function nbrSuivis($user_id)
		{
				$qb = $this->createQueryBuilder('u1');
				$qb
						->where("u1.id = :user_id")
					  ->setParameter("user_id", $user_id)
					  ->innerJoin('u1.abonnements', 'u2')
					  ->select($qb->expr()->count("u2"))
				;
			
				return $qb->getQuery()->getSingleScalarResult();
		}
	
		public function nbrAbonnes($user_id)
		{
				$qb = $this->createQueryBuilder('u1');
				$qb
					  ->innerJoin('u1.abonnements', 'u2')
					  ->Where($qb->expr()->in('u2', $user_id))
					  ->select($qb->expr()->count("u1"))
				;

				return $qb->getQuery()->getSingleScalarResult();
		}
	
		public function findWithPattern($pattern)
		{
			$qb = $this
					->createQueryBuilder("u")
					->where("u.username LIKE :pattern")
					->setParameter("pattern", "%".$pattern."%")
					->setMaxResults(5)
    	;
			
			return $qb->getQuery()->getArrayResult();
		}
}
